#!/bin/bash

# Joe Hillenbrand <joehillen@gmail.com> Â© 2021
# MIT License

export GIT_SSH_COMMAND="ssh -o ControlPath=none"
CONFIGFILE="${XDG_CONFIG_DIR:-${HOME}/.config}/gitnotified.conf"

usage() {
echo  >&2 "\
Usage: gitnotified [COMMAND]

Show a desktop notification when there is a new commit to a remote git branch.

Commands:
  daemon     Keep process runnings and recheck every 5 minutes (DEFAULT)
  once       Check each repo and exit
  clean      Remove the tracking note from the git repository

Configuration:
 The config file is $CONFIGFILE

 The config format is:

     path/to/repo remote branch # comments are allowed

 remote and branch are optional and default to origin and master
"
exit 1
}

mkbody () {
    local rev=$1
    local params="--no-show-signature --format=full --shortstat --no-decorate --abbrev-commit"
    if [[ $(git rev-list --no-walk --count --merges $rev) = 1 ]]; then # if this is a merge commit
        git --no-pager log $params ${rev}^..${rev}
    else
        git --no-pager show $params $rev
    fi
}

check() {

    dir=$1
    remote=$2
    branch=$3

    # use eval to expand ~
    eval cd $dir
    if [[ $? -eq 0 ]]; then
        git fetch --all
        rev=$(git rev-parse $remote/$branch)
        if [[ -z $(git --no-pager notes --ref=gitnotified show $rev 2>/dev/null) ]]; then
            when=$(git --no-pager show -s --no-show-signature --format=%cr $rev)
            body=$(mkbody $rev)
            summary="$(pwd | sed s,$HOME,~,) ($remote/$branch) $when"
            echo '========================================='
            echo -e "$summary"
            echo -e "$body"
            echo '========================================='
            if [[ $(type -P notify-send) ]] ; then
                # sanitize
                body=${body//&/&amp;}
                body=${body//</&lt;}
                body=${body//>/&gt;}
                notify-send -a gitnotified "$summary" "$body"
            elif [[ $(type -P terminal-notifier) ]]; then
                title="$(pwd | sed s,$HOME,~,) has a new commit"
                subtitle="$remote/$branch - $when"
                terminal-notifier -title "$title" -subtitle "$subtitle" -message "$body"
            fi
            git notes --ref=gitnotified add $rev -m notified
        fi
        git fetch $remote $branch:$branch
    fi
}

daemon() {
    dir=$1
    remote=$2
    branch=$3
    while :; do
        check $dir $remote $branch
        sleep $((270 + RANDOM % 60)) # ~5 minutes
    done
}

COMMAND=${1:-daemon}

# sanitize config
# remove comments
# |                              ensure a trailing newline
# |                              |          remove blank lines
# V                              V          V
{ sed -e 's/#.*//' $CONFIGFILE ; echo ; } | sed -e '/^\s*$/d' | (
    while read dir remote branch; do
        remote=${remote:-origin}
        branch=${branch:-master}
        case $COMMAND in
            daemon)
                # kill children on exit
                trap "trap - SIGTERM && kill -- -$$" SIGINT SIGTERM EXIT QUIT
                echo "Watching $dir ($remote/$branch)..."
                daemon $dir $remote $branch &
                sleep 1 # stagger each thread by a second
                ;;
            once)
                echo "$dir ($remote/$branch)..."
                check $dir $remote $branch
                ;;
            clean)
                echo "$dir ($remote/$branch)..."
                eval cd $dir && git notes --ref=gitnotified remove $remote/$branch
                ;;
            *)
                usage
                ;;
        esac
    done
    wait
)
